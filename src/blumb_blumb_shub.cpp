#include <Rcpp.h>
#include <math.h>
#include "is_prime_internal.h"
#include "gcd_internal.h"
using namespace Rcpp;

//' Blum Blum Shub (B.B.S.) Pseudorandom Number Generator
//'
//' The Blum Blum Shub (B.B.S.) pseudorandom number generator was proposed in 1986 by Lenore Blum, Manuel Blum, and Michael Shub.
//' It is based on the security of the quadratic residuosity problem, making it a cryptographically secure generator.
//' The B.B.S. generator relies on the product of two large prime numbers, \eqn{p} and \eqn{q}, and generates pseudorandom bits by repeatedly squaring a seed value modulo \eqn{n = p \times q}.
//'
//' The generator operates as follows:
//' 1. Select two large prime numbers, \eqn{p} and \eqn{q}, such that both \eqn{p \mod 4 = 3} and \eqn{q \mod 4 = 3}.
//' 2. Set \eqn{n = p \times q}.
//' 3. Choose a seed \eqn{s} such that \eqn{gcd(s, n) = 1}.
//' 4. Generate the sequence using \eqn{x_{i+1} = (x_i)^2 \mod n}, where the initial \eqn{x_0 = s^2 \mod n}.
//' 5. Output the least significant bit (or several bits) of each \eqn{x_i} as the pseudorandom output.
//'
//' @param seed Initial seed for the generator. This should be an integer such that \eqn{gcd(seed, p \times q) = 1}.
//' @param p A large prime number such that \eqn{p \mod 4 = 3}.
//' @param q A large prime number such that \eqn{q \mod 4 = 3}.
//' @param n Number of pseudorandom numbers (or bits) to generate.
//'
//' @return A numeric vector of pseudorandom values generated by the Blum Blum Shub algorithm.
//'
//' @references Lenore Blum, Manuel Blum, and Michael Shub, "A Simple Unpredictable Pseudo-Random Number Generator", SIAM Journal on Computing, 1986.
//'
//' @examples
//' # Example usage of the blumb_blumb_shub function
//' blumb_blumb_shub(123456789, 11, 19, 10)
//'
// [[Rcpp::export]]

NumericVector blumb_blumb_shub(long long seed, long long p, long long q, int n) {
  // Check if p and q are prime and congruent to 3 mod 4
  if (!is_prime_internal(p) || p % 4 != 3) stop("p must be prime and congruent to 3 (mod 4).");
  if (!is_prime_internal(q) || q % 4 != 3) stop("q must be prime and congruent to 3 (mod 4).");

  // Modulus m is the product of primes p and q
  long long m = p * q;

  // Ensure seed is relatively prime to m
  if (gcd_internal(seed, m) != 1) stop("Seed must be relatively prime to p*q.");

  // Initialize vector to hold generated numbers
  NumericVector generated_numbers(n);

  // Set the initial value to seed
  long long x = seed;

  // Generate n numbers
  for (int i = 0; i < n; ++i) {
    x = (x * x) % m; // Square and reduce modulo m
    generated_numbers[i] = x; // Store the generated number
  }

  return generated_numbers;
}



/*** R
blumb_blumb_shub(3, 11, 23, 100)
*/
