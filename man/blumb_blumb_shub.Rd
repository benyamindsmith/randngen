% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{blumb_blumb_shub}
\alias{blumb_blumb_shub}
\title{Blum Blum Shub (B.B.S.) Pseudorandom Number Generator}
\usage{
blumb_blumb_shub(seed, p, q, n)
}
\arguments{
\item{seed}{Initial seed for the generator. This should be an integer such that \eqn{gcd(seed, p \times q) = 1}.}

\item{p}{A large prime number such that \eqn{p \mod 4 = 3}.}

\item{q}{A large prime number such that \eqn{q \mod 4 = 3}.}

\item{n}{Number of pseudorandom numbers (or bits) to generate.}
}
\value{
A numeric vector of pseudorandom values generated by the Blum Blum Shub algorithm.
}
\description{
The Blum Blum Shub (B.B.S.) pseudorandom number generator was proposed in 1986 by Lenore Blum, Manuel Blum, and Michael Shub.
It is based on the security of the quadratic residuosity problem, making it a cryptographically secure generator.
The B.B.S. generator relies on the product of two large prime numbers, \eqn{p} and \eqn{q}, and generates pseudorandom bits by repeatedly squaring a seed value modulo \eqn{n = p \times q}.
}
\details{
The generator operates as follows:
1. Select two large prime numbers, \eqn{p} and \eqn{q}, such that both \eqn{p \mod 4 = 3} and \eqn{q \mod 4 = 3}.
2. Set \eqn{n = p \times q}.
3. Choose a seed \eqn{s} such that \eqn{gcd(s, n) = 1}.
4. Generate the sequence using \eqn{x_{i+1} = (x_i)^2 \mod n}, where the initial \eqn{x_0 = s^2 \mod n}.
5. Output the least significant bit (or several bits) of each \eqn{x_i} as the pseudorandom output.
}
\examples{
# Example usage of the blumb_blumb_shub function
random_numbers <- blumb_blumb_shub(6, 103, 563, 1000)
plot(random_numbers)
}
\references{
Lenore Blum, Manuel Blum, and Michael Shub, "A Simple Unpredictable Pseudo-Random Number Generator", SIAM Journal on Computing, 1986.
}
